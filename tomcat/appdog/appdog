#!/usr/bin/python3

# chkconfig:   2345 90 10
# description:  appdog is a apps daemon tool
# version: v0.2
# author: joe
# required: python3

### BEGIN INIT INFO
# Provides:          giiwa
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the appdog
# Description:       starts appdog using start-stop-daemon
### END INIT INFO

import os, sys, time, threading, subprocess, configparser
import json
import requests
import platform
import psutil, atexit
from datetime import datetime
from scapy.config import conf

global logfile,conf

logfile="/var/log/appdog.log"

def _log(x):
    global logfile
    f1=open(logfile, "a+")
    x1 = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) + ' ' + x
    print(x1, file=f1)
    f1.close()
    print(x1)
        
def _load_config():
    global conf, logfile
    conf=configparser.ConfigParser()
    try:
        if os.path.isfile("/etc/appdog.conf"):
            conf.read("/etc/appdog.conf")
        else:
            conf.read("appdog.conf")
        logfile=conf.get("global", "log")
    except Exception as e:
        _log('read error: appdog.conf')
        print(e)
        sys.exit(0)
    
def _startx(x, u, cwd):
    global logfile
    _log("starting: " + x)
    try:
        if len(u)>0:
            c="sudo -E -u " + u + " " + x + ">" + logfile + " 2>&1"
            _log(c)
            subprocess.Popen(c, shell=True, cwd=cwd)
        else:
            c=x + ">" + logfile + " 2>&1"
            _log(c)
            subprocess.Popen(x, shell=True, cwd=cwd)
    except Exception as e:
        _log(str(e));
   
def _stopd(x):
    #docker kill [containid]
    os.popen('docker kill ' + x)
    
def _dockerx(x):
    #docker inspect [containid]
    s = "".join(os.popen('docker inspect ' + x).readlines())
    
    l1 = json.loads(s)
    
    for e in l1:
      state = e['State']
      id = e['Id']
      running = state['Status']
      if running in ['running']:
        #check health
        if 'Health' in state:
          health = state['Health']
          if 'Status' in health:
            status = health['Status']
            _log('[' +  id + '] ' + status)
            if status in ['healthy', 'starting']:
              #ok
              continue
            else:
              #dead
              _log('[' +  id + '] kill and start')
              os.popen('docker kill ' + id)
              os.popen('docker start ' + id)
    
        _log('[' +  id + '] running, no health check')
    
      else:
        _log('[' +  id + '] ' + ' start')
        os.popen('docker start ' + id)
        
def _pidx(x, max):
    try:
        #pid and cpu
        s = os.popen("ps aux | grep '"+x+"' | grep -v 'grep'").readlines()[0];
        ss = s.split( )
        pid = int(ss[1])
        cpu = float(ss[2])
        
        #check cpu        
        if max>0 and cpu>=max:
            subprocess.call("kill -9 " + str(pid), shell=True)
            _log("[" + x +"] was killed for high cpu=" + str(cpu) + "!")
            pid = -1                
        return pid
    except:
        return -1
        
def _stopx(x, name):
    x=x.strip()
    pid=_pidx(x, -1)
    if pid>0:
        subprocess.call("kill -9 " + str(pid), shell=True)
        _log("[" + name +"] was stoped !" )       

def _app_main(x):
    global conf
    
    try:
        command=conf.get(x, "start")
    except:
        command = ""
    
    try:
        pattern=conf.get(x, "pattern")
    except:
        pattern = ""

    try:
        docker = conf.get(x, "docker")
    except:
        docker = ""

    try:
        user=conf.get(x, "user")
    except:
        user=""
        
    try:
        check=conf.getfloat(x, "check")
    except:
        check=3
        
    try:
        max_cpu=conf.getfloat(x, "max_cpu")
    except:
        max_cpu=-1
        
    try:
        enabled=conf.getint(x, "enabled")
    except:
        enabled=1
        
    try:
        path=conf.get(x, "path")
    except:
        path=""
    
    if enabled>0:
        pid = -1
        while True:
            try:
                if docker != "":
                    _dockerx(docker)
                else:
                    if pid == -1:
                        pid = _pidx(pattern, max_cpu)
                    try:
                        p = psutil.Process(pid)
                        if p.is_running():
                            time.sleep(check)
                            continue
                    except Exception as e:
                        pass
                    
                    _startx(command, user, path)
                    pid = -1
            except Exception as e:
                _log(str(e))
                
            time.sleep(check)

def _mon_main(x):
    global conf
    
    try:
        pattern=conf.get(x, "pattern")
    except:
        pattern = ""

    try:
        report=conf.get(x, "report")
    except:
        report = ""

    try:
        node=conf.get(x, "node")
    except:
        node = ""

    try:
        check=conf.getfloat(x, "check")
    except:
        check=3
        
    try:
        enabled=conf.getint(x, "enabled")
    except:
        enabled=1

    try:
        appid=conf.getint(x, "appid")
    except:
        appid=""

    try:
        secret=conf.getint(x, "secret")
    except:
        secret=""
        
    if enabled>0:
        name = x.replace('mon:', '')
        while True:
            try:
                if pattern != "":
                    #cpu, mem
                    l1 = os.popen("ps -ef | grep '"+ pattern +"'| grep -v 'grep'").readlines();
                    cpu = 0
                    mem = 0
                    for s in l1:
                        ss = s.split( )
                        pid = ss[1];
                        p = psutil.Process((int)(pid))
                        cpu += float(p.cpu_percent(interval=0.1))
                        mem += float(p.memory_percent())
            
                    j1 = {'node':node, 
                          'name':name, 
                          'cpu': cpu, 
                          'mem': mem,
                          'appid':appid,
                          'secret':secret
                          };
                    r = requests.post(report, data=j1)
                    r.close()
                else:
                    #node, cpu, mem, os
    #                 print(psutil.sensors_temperatures())
                    
                    mem = psutil.virtual_memory();
                    j1 = {'node':node, 
                          'os':platform.platform(), 
                          'name': 'node', 
                          'cores':psutil.cpu_count(logical=True), 
                          'mem': mem.total,
                          'uptime': datetime.fromtimestamp(psutil.boot_time()),
                          '_usage':psutil.cpu_percent(), 
                          '_usage2':(int)(mem.percent),
                          'appid':appid,
                          'secret':secret
                          };
                    r = requests.post(report, data=j1)
                    r.close()
            except Exception as e:
                _log(str(e))
        
            time.sleep(check)
    
def _ha_main(x):
    global conf
    
    try:
        enabled=conf.getint(x, "enabled")
    except:
        enabled=1
    
    if enabled == 1:
        ip=conf.get(x, "ip")
        iface=conf.get(x, "iface")
        standby=conf.get(x, "standby")
        try:
            check=conf.getfloat(x, "check")
        except:
            check=3
            
        while True:
            try:
                resp = os.system("ping -c 1 " + standby)
                if resp == 0:
                    resp = os.system("ping -c 1 " + ip)
                    if resp == 0:
                        pass
                    else:
                        subprocess.call("ip address add " + ip + " dev " + iface, shell=True)
                else:
                    subprocess.call("ip address add " + ip + " dev " + iface, shell=True)
            except Exception as e:
                _log(str(e))
                
            time.sleep(check)
                        
        
def _ha_start(x):
    try:
        t = threading.Thread(target=_ha_main, args=(x,))    
        t.start()
    except Exception as e:
        _log(str(e))

def _app_start(x):
    try:
        t = threading.Thread(target=_app_main, args=(x,))    
        t.start()
    except Exception as e:
        _log(str(e))
   
def _mon_start(x):
    try:
        t = threading.Thread(target=_mon_main, args=(x,))
        t.start()
    except Exception as e:
        _log(str(e))
             
def _start():
    global conf
    
    _load_config()
    pidfile=conf.get("global", "pid")
    
    _log("appdog started.")

    ##check if the appdog is running
    try:
        f=open(pidfile, "r")
        pid1 = f.readline().strip();
        f.close()
        
        p = psutil.Process(int(pid))
        if p.is_running():
            print("already running [" + pid1 + "], abort!")
            return

    except:
        pass
    
    pid=os.fork()
    if pid:
        sys.exit(0)
    
    os.chdir('/')
    os.umask(0)
    os.setsid()
    pid=os.fork()
    if pid:
        sys.exit(0)
        
    sys.stdout.flush()
    sys.stderr.flush()
    
    with open('/dev/null') as read_null, open('/dev/null', 'w') as write_null:
        os.dup2(read_null.fileno(), sys.stdin.fileno())
        os.dup2(write_null.fileno(), sys.stdout.fileno())
        os.dup2(write_null.fileno(), sys.stderr.fileno())
             
    with open(pidfile, 'w+') as f:
        f.write(str(os.getpid()))
        atexit.register(os.remove, pidfile)
            
    for s in conf.sections():
        if "app:" in s:
            _app_start(s)
        elif "mon:" in s:
            _mon_start(s)
        elif "ha" == s:
            _ha_start(s)

def _stop():
    global conf
    _load_config()
        
    pidfile=conf.get("global", "pid")
    
    ##check if the appdog is running
    try:
        f=open(pidfile, "r")
        pid1 = f.readline().strip();
        f.close()
        
        p = psutil.Process(int(pid1))
        if p.is_running():
            subprocess.call("kill -9 " + pid1, shell=True)
            _log("[" + pid1 +"] was killed by stop!")
            return
        
        print("no running!")
    except Exception as e:
        print("no running!")
                 
def _usage():
    print("Help: \nappdog [start|stop|restart]")
    print("\tstop: stop the appdog")
    print("\tstart: start the appdog")
    print("\trestart: restart the appdog")

if __name__=="__main__":
    if len(sys.argv) > 1:
        a=sys.argv[1]
    else:
        a=""
    if a=="start":
        _start()
    elif a=="stop":
        _stop()
    elif a=="restart":
        _stop()
        _start()
    else:
        _usage()
