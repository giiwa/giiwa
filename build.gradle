apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

group = 'org.giiwa'
version = '2.1'
def buildno = new Date().format("yyMMddHHmm")

description = 'giiwa distributed web framework'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

println description
println 'buildno: ' + buildno

repositories {
     maven { url "https://repo1.maven.org/maven2" }
}

configurations.all() {
    Configuration configuration ->
        configuration.resolutionStrategy.failOnVersionConflict()
}

dependencies {
    compile group: 'com.jcraft', name: 'jsch', version:'0.1.55'
    compile group: 'commons-net', name: 'commons-net', version:'3.6'

	compile group: 'io.netty', name: 'netty-all', version: '4.1.45.Final'
	compile group: 'com.twelvemonkeys.imageio', name: 'imageio-tiff', version: '3.6'
		
    compile ('org.fusesource:sigar:1.6.4') {
    	exclude group: 'log4j',module: 'log4j'
    }
    compile ('redis.clients:jedis:3.1.0') {
    	exclude group: 'org.slf4j',module: 'slf4j-api'
    }
    compile ('org.apache.commons:commons-lang3:3.9')
    compile ('org.apache.commons:commons-configuration2:2.5'){
    	exclude group: 'org.apache.commons',module: 'commons-lang3'
    }
    compile ("org.apache.commons:commons-dbcp2:2.6.0") {
    	exclude group: 'org.apache.commons',module: 'commons-pool2'
    }
    compile group: 'org.apache.commons', name: 'commons-pool2', version:'2.6.2'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.8'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version:'4.5.8'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version:'4.4.11'
    compile ('org.apache.activemq:activemq-client:5.15.9') {
    	exclude group: 'org.slf4j',module: 'slf4j-api'
    }
    compile ('org.apache.kafka:kafka-clients:0.10.2.1') {
    	exclude group: 'org.slf4j',module: 'slf4j-api'
    }
    compile ('log4j:log4j:1.2.17')
    compile ("org.apache.velocity:velocity-engine-core:2.2"){
    	exclude group: 'org.apache.commons',module: 'commons-lang3'
    	exclude group: 'org.slf4j',module: 'slf4j-api'
    }
    compile ('org.thymeleaf:thymeleaf:3.0.11.RELEASE') {
    	exclude group: 'org.slf4j',module: 'slf4j-api'
    }
    compile group: 'com.h2database', name: 'h2', version:'1.4.199'
    compile group: 'org.freemarker', name: 'freemarker', version:'2.3.28'
    compile ('com.whalin:Memcached-Java-Client:3.0.2'){
    	exclude group: 'org.slf4j',module: 'slf4j-api'
    }
    compile group: 'org.rosuda.REngine', name: 'Rserve', version:'1.8.1'
    compile group: 'javax.mail', name: 'mail', version:'1.4'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version:'1.4'
    compile group: 'postgresql', name: 'postgresql', version:'9.1-901-1.jdbc4'
    compile group: 'mysql', name: 'mysql-connector-java', version:'8.0.16'
    compile group: 'com.google.zxing', name: 'core', version:'3.4.0'
    compile group: 'com.drewnoakes', name: 'metadata-extractor', version:'2.9.1'
    compile group: 'dom4j', name: 'dom4j', version:'1.6.1'
    compile group: 'org.jsoup', name: 'jsoup', version:'1.10.2'
    compile group: 'org.mongodb', name: 'mongo-java-driver', version:'3.12.7'
    compile group: 'com.google.code.gson', name: 'gson', version:'2.8.0'
//    compile ('com.jayway.jsonpath:json-path:2.2.0') {
//    	exclude group: 'org.slf4j',module: 'slf4j-api'
//    }
//    compile ('org.slf4j:slf4j-api:1.6.6')
    compile ('org.slf4j:slf4j-log4j12:1.6.6')
    //compile ('org.apache.commons:commons-math3:3.6.1')
        
    compile files('lib/ojdbc8.jar')
    compile files('tomcat/lib/catalina.jar')
    compile files('tomcat/lib/servlet-api.jar')
}

task prepare(dependsOn: build) {
	doLast {
		copy{
		    from('tomcat')
		    into('build/giiwa/giiwa/')
		}

		copy{
		    from('tomcat/')
		    into('build/giiwa/giiwa/')
		    include 'giiwa'
		    fileMode 0755
		}
		
		copy{
		    from('tomcat/bin/')
		    into('build/giiwa/giiwa/bin/')
		    include '*.sh'
		    fileMode 0755
		}

		copy{
		    from('tomcat/appdog')
		    into('build/giiwa/giiwa/appdog')
		    include 'appdog'
		    fileMode 0755
		}
		
		copy{
		    from('src/main/modules')
		    into('build/giiwa/giiwa/modules')
		}
		
		def xml1 = new BufferedReader(new FileReader(new File('src/main/modules/default/module.xml')))
		def xml2 = new PrintStream(new File('build/giiwa/giiwa/modules/default/module.xml'))
		def line = xml1.readLine()
		while( line != null ){
			if( line.indexOf('>0<')>-1 ){
				line = line.replace('<build>0</build>', '<build>' + buildno + '</build>')
			}
			xml2.println(line)
			line = xml1.readLine();
		}
		xml1.close();
		xml2.close();
		
		copy{
		    from('src/main/WEB-INF')
		    into('build/giiwa/giiwa/modules/WEB-INF')
		}
		copy{
		    from configurations.runtime
		    into('build/giiwa/giiwa/modules/WEB-INF/lib')
		}
		copy {
		    from('build/libs')
		    into('build/giiwa/giiwa/modules/WEB-INF/lib')
		}
		copy {
		    from('build/giiwa/giiwa/modules/default')
		    into('build/upgrade/default')
		}
		copy {
		    from('build/giiwa/giiwa/modules/WEB-INF')
		    into('build/upgrade/default/WEB-INF')
		}
	}
}

task zip(type: Zip,dependsOn:prepare) {
	from 'build/giiwa'
	destinationDir file('build')
	archiveName 'giiwa-' + version + '.zip'
	
	doLast {
		println 'zip success, archived build/' + archiveName
	}
}

task tgz(type: Tar, dependsOn:prepare) {
	from 'build/giiwa'
	compression 'gzip'
	destinationDir file('build')
	archiveName 'giiwa-' + version + '.tgz'

	doLast {
		println 'tgz success, archived build/' + archiveName
	}
}

task upgrade(type: Zip,dependsOn:prepare) {
	from 'build/upgrade'
	destinationDir file('build')
	archiveName 'giiwa-' + version + '.' + buildno + '-upgrade.zip'

	doLast {
		println 'zip success, archived build/' + archiveName
	}
}

task release(dependsOn: [upgrade, zip, tgz]);

