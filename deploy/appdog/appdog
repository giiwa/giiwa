#!/usr/bin/python3

# chkconfig:   2345 90 10
# description:  appdog is a apps daemon tool
# version: v0.2
# author: joe
# required: python3

### BEGIN INIT INFO
# Provides:          giiwa
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the appdog
# Description:       starts appdog using start-stop-daemon
### END INIT INFO

import os, sys, time, threading, configparser
import requests
import psutil, atexit

global logfile,conf,startup

logfile = "/var/log/appdog.log"
startup = (int)(time.strftime("%H", time.localtime()))

def _log(x):
    global logfile
    f1 = open(logfile + '.' + time.strftime("%m", time.localtime()),"a+")
    x1 = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) + ' ' + x
    print(x1, file=f1)
    f1.close()
    print(x1)
        
def _load_config():
    global conf, logfile
    conf=configparser.ConfigParser()
    try:
        if os.path.isfile("/etc/appdog.conf"):
            conf.read("/etc/appdog.conf")
        else:
            conf.read("appdog.conf")
        logfile=conf.get("global", "log")
    except Exception as e:
        _log('read error: appdog.conf')
        print(e)
        sys.exit(0)
    
def _startapp(x, u):
    global logfile
    _log("starting: " + x)
    try:
        if len(u)>0:
            c="su " + u + " " + x
        else:
            c=x
        _log(c)
        os.system(c)
        
    except Exception as e:
        _log(str(e));
               
def _pidx(x):
    try:
        #pid and cpu
        s = os.popen("ps aux | grep '"+x+"' | grep -v 'grep'").readlines()[0];
        ss = s.split( )
        pid = int(ss[1])
        cpu = float(ss[2])
        return pid, cpu
    except:
        return -1,-1
        
def _app_main(x):
    global conf, startup
    
    try:
        #start command
        command = conf.get(x, "start")
    except:
        command = ""
    
    try:
        #process name pattern
        pattern = conf.get(x, "pattern")
    except:
        pattern = ""

    try:
        #health
        health = conf.get(x, "health")
    except:
        health = ""

    try:
        #start user
        user = conf.get(x, "user")
    except:
        user = ""
        
    try:
        #check interval
        check = conf.getfloat(x, "check")
    except:
        check = 3
        
    try:
        #max cpu usage, if happen, restart
        max_cpu = conf.getfloat(x, "max_cpu")
    except:
        max_cpu = -1
        
    try:
        #enabled or disabled
        enabled = conf.getint(x, "enabled")
    except:
        enabled = 1
        
    try:
        #recycle time point
        recycle = conf.getint(x, 'recycle')
    except:
        recycle = -1
            
    if enabled>0:
        pid = -1
        while True:
            try:
                if pid == -1:
                    pid,cpu = _pidx(pattern)
                    #check cpu        
                    if max_cpu>0 and cpu>=max_cpu:
                        os.system("kill -9 " + str(pid))
                        _log("[" + x +"] was killed for high cpu=" + str(cpu) + "!")
                        pid = -1           
                try:
                    if pid != -1:
                        p = psutil.Process(pid)
                        if p.is_running():
                            #check recycle
                            if (recycle>-1 and startup != (int)(time.strftime("%H", time.localtime()))):
                                #TODO kill -9
                                os.system("kill -9 " + str(pid))
                                _log("[" + str(pid) +"] was killed by recycle!")
                                pid = -1
                            elif health.startswith("http://"):
                                #todo
                                r = requests.get(health, timeout=10)
                                if (r.status_code == 500):
                                    os.system("kill -9 " + str(pid))
                                    _log("[" + str(x) + ":" + str(pid) +"] was killed by health (" + r.text +")!")
                                    pid = -1
                            elif health.startswith("fping"):
                                r = os.system(health)
                                if r != 0:
                                    os.system("kill -9 " + str(pid))
                                    _log("[" + str(x) +":" + str(pid) + "] was killed by health (" + str(r) +")!")
                                    pid = -1
                            elif health.startswith("ping"):
                                r = os.system(health)
                                if r != 0:
                                    os.system("kill -9 " + str(pid))
                                    _log("[" + str(x) +":" + str(pid) + "] was killed by health (" + str(r) +")!")
                                    pid = -1
                except Exception as e:
                    os.system("kill -9 " + str(pid))
                    _log("[" + str(x) +":" + str(pid) + "] was killed by error (" + str(e) +")!")
                    pid = -1
                    
                if pid == -1:
                    _startapp(command, user)
                    _log("[" + str(x) +":" + str(pid) + "] come back!")
                    
            except Exception as e:
                _log(str(e))
            
            time.sleep(check)

def _cron_main(x):
    global conf
    
    try:
        #start command
        command = conf.get(x, "start")
    except:
        command = ""
    
    try:
        #start user
        user = conf.get(x, "user")
    except:
        user = ""
        
    try:
        #enabled or disabled
        enabled = conf.getint(x, "enabled")
    except:
        enabled = 1
        
    try:
        #time point: 0 0 * * *
        timepoint = conf.get(x, 'time').split()
    except:
        #min hour week days month
        timepoint = '0 0 0 0 0'.split()
            
    if enabled>0:
        while True:
            try:
                check = 40
                #checking time
                t1 = time.localtime(time.time())
                
                if timepoint[0] == '*' or int(timepoint[0]) == t1.tm_min:
                    if timepoint[1] == "*" or int(timepoint[1]) == t1.tm_hour:
                        if timepoint[2] == '*' or int(timepoint[2]) == (t1.tm_wday + 1):
                            if timepoint[3] == '*' or int(timepoint[3]) == t1.tm_mday:
                                if timepoint[4] == '*' or int(timepoint[4]) == t1.tm_mon:
                                    _log('run cron ' + x)
                                    _startapp(command, user)
                                    check = 100
            except Exception as e:
                _log(str(e))
                
            time.sleep(check)

def _docker_main(x):
    global conf
    
    try:
        #health checking
        health = conf.get(x, "health")
    except:
        health = ""
    
    try:
        #check interval, seconds
        check = int(conf.getfloat(x, "check"))
    except:
        check = 5

    try:
        #retry times if dead happen
        retry = int(conf.getfloat(x, "retry"))
    except:
        retry = 3
        
    try:
        #enabled or disabled
        enabled = conf.getint(x, "enabled")
    except:
        enabled = 1
                
    if enabled>0:
        name = x.replace('docker:', '')
        retries = 0
        while True:
            try:
                status = os.popen('docker inspect --format="{{.State.Status}}" ' + name).readlines()[0]
                if 'running' in status:
                    if health.startswith('http'):
                        r = requests.get(health, timeout=5)
                        if(r.status_code < 400):
                            retries = 0
                        else:
                            retries += 1                   
                        _log('[' + name + '] ' + str(retries) + '/' + str(retry) + ', ' + str(r.status_code) + ', ' + r.text)
                    else:
                        r = os.popen(health).readlines()
                        if len(r) > 0:
                            retries += 1                   
                        else:
                            retries = 0
                        _log('[' + name + '] ' + str(retries) + '/' + str(retry) + ', ' + str(r))
                elif 'exit' in status:
                    retries = retry + 1
                else:
                    retries += 1
                    _log('[' + name + '] ' + str(retries) + '/' + str(retry) + ', ' + status)
            except Exception as e:
                retries += 1
                _log('[' + name + '] ' + str(retries) + '/' + str(retry) + ', -, ' + str(e))
                
            if(retries >= retry):
                try:
                    _log('stopping ' + name)
                    os.system('docker stop ' + name)
                    time.sleep(check)
                    
                    s = os.popen('docker inspect --format="{{.Id}}" ' + name).readlines();
                    if len(s) > 0:
                        s = s[0].strip()
                        pid,cpu = _pidx(s)
                        if pid > 0:
                            os.system("kill -9 " + str(pid))
                    os.system('rm -rf /run/docker/runtime-runc/moby/`docker inspect --format="{{.Id}}" ' + name + '`')
                    _log('starting ' + name)
                    os.system('docker start ' + name)
                    retries = -20
                except Exception as e:
                    _log('[' + name + '] ' + str(e))

            time.sleep(check)
    
def _ha_main(x):
    global conf
    
    try:
        enabled=conf.getint(x, "enabled")
    except:
        enabled=1
    
    if enabled == 1:
        ip=conf.get(x, "ip")
        iface=conf.get(x, "iface")
        standby=conf.get(x, "standby")
        try:
            check=conf.getfloat(x, "check")
        except:
            check=3
            
        while True:
            try:
                resp = os.system("fping -c1 -t500 " + standby)
                if resp == 0:
                    resp = os.system("fping -c1 -t500 " + ip)
                    if resp == 0:
                        pass
                    else:
                        os.popen("ip address add " + ip + " dev " + iface)
                else:
                    os.popen("ip address add " + ip + " dev " + iface)
            except Exception as e:
                _log(str(e))
                
            time.sleep(check)
                        
        
def _ha_start(x):
    try:
        t = threading.Thread(target=_ha_main, args=(x,))    
        t.start()
    except Exception as e:
        _log(str(e))

def _app_start(x):
    try:
        t = threading.Thread(target=_app_main, args=(x,))    
        t.start()
    except Exception as e:
        _log(str(e))

def _cron_start(x):
    try:
        t = threading.Thread(target=_cron_main, args=(x,))    
        t.start()
    except Exception as e:
        _log(str(e))

def _docker_start(x):
    try:
        t = threading.Thread(target=_docker_main, args=(x,))
        t.start()
    except Exception as s:
        _log(str(e))
             
def _start():
    global conf
    
    _load_config()
    pidfile=conf.get("global", "pid")
    
    _log("appdog started.")

    ##check if the appdog is running
    try:
        f=open(pidfile, "r")
        pid1 = f.readline().strip();
        f.close()
        
        p = psutil.Process(int(pid))
        if p.is_running():
            print("already running [" + pid1 + "], abort!")
            return

    except:
        pass
    
    pid=os.fork()
    if pid:
        sys.exit(0)
    
    os.chdir('/')
    os.umask(0)
    os.setsid()
    pid=os.fork()
    if pid:
        sys.exit(0)
        
    sys.stdout.flush()
    sys.stderr.flush()
    
    with open('/dev/null') as read_null, open('/dev/null', 'w') as write_null:
        os.dup2(read_null.fileno(), sys.stdin.fileno())
        os.dup2(write_null.fileno(), sys.stdout.fileno())
        os.dup2(write_null.fileno(), sys.stderr.fileno())
             
    with open(pidfile, 'w+') as f:
        f.write(str(os.getpid()))
        atexit.register(os.remove, pidfile)
            
    for s in conf.sections():
        if "app:" in s:
            _app_start(s)
        elif "docker:" in s:
            _docker_start(s)
        elif "cron:" in s:
            _cron_start(s)
        elif "ha" == s:
            _ha_start(s)

def _stop():
    global conf
    _load_config()
        
    pidfile = conf.get("global", "pid")
    
    ##check if the appdog is running
    try:
        f=open(pidfile, "r")
        pid1 = f.readline().strip();
        f.close()
        
        p = psutil.Process(int(pid1))
        if p.is_running():
            os.popen("kill -9 " + pid1)
            _log("[" + pid1 +"] was killed by stop!")
            return
        
        print("no running!")
    except Exception as e:
        print("no running!")
                 
def _usage():
    print("Help: \nappdog [start|stop|restart]")
    print("\tstop: stop the appdog")
    print("\tstart: start the appdog")
    print("\trestart: restart the appdog")

if __name__=="__main__":
    if len(sys.argv) > 1:
        a=sys.argv[1]
    else:
        a=""
    if a=="start":
        _start()
    elif a=="stop":
        _stop()
    elif a=="restart":
        _stop()
        _start()
    else:
        _usage()
